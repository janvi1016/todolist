{"version":3,"sources":["Component/Images/todo.svg","Component/Todo/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","inputData","setInputData","list","localStorage","getItem","console","log","JSON","parse","getLocalItems","Items","setItems","toggleSubmit","setToggleSubmit","isEditItem","setIsEditItem","addItem","map","val","id","name","allInputData","Date","getTime","toString","alert","useEffect","setItem","stringify","className","src","img","alt","type","placeholder","value","onChange","event","target","title","onClick","newEditItem","find","editItem","updatedItem","filter","deleteItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAe,MAA0B,iC,eCwI1BA,EApIF,WAIZ,IAYA,EAAkCC,qBAAlC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAbN,WACnB,IAAIG,EAAKC,aAAaC,QAAQ,YAG9B,OAFAC,QAAQC,IAAIJ,GAETA,EACKK,KAAKC,MAAML,aAAaC,QAAQ,aAEhC,GAM0BK,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwCZ,oBAAS,GAAjD,mBAAOa,EAAP,KAAqBC,EAArB,KACA,EAAoCd,mBAAS,MAA7C,mBAAOe,EAAP,KAAmBC,EAAnB,KAEMC,EAAQ,WACb,GAAIhB,EAEG,GAAIA,IAAcY,EACpBD,EACED,EAAMO,KAAI,SAACC,GACT,OAAIA,EAAIC,KAAOL,EACN,2BAAKI,GAAZ,IAAiBE,KAAMpB,IAElBkB,MAIXjB,EAAa,IACbc,EAAc,MACdF,GAAgB,OACV,CACV,IAAMQ,EAAe,CACdF,IAAI,IAAIG,MAAOC,UAAUC,WACzBJ,KAAMpB,GAEPW,EAAS,GAAD,mBAAKD,GAAL,CAAWW,KACnBpB,EAAa,SApBbwB,MAAM,oBAsDd,OANAC,qBAAU,WACTvB,aAAawB,QAAQ,WAAWpB,KAAKqB,UAAUlB,MAE7C,CAACA,IAIH,mCACA,qBAAKmB,UAAU,WAAf,SACO,sBAAKA,UAAU,YAAf,UACE,mCACE,qBAAKC,IAAKC,EAAKC,IAAI,aACnB,4EAEF,sBAAKH,UAAU,WAAf,UACE,uBACEI,KAAK,OACLC,YAAY,kBACZC,MAAOnC,EACPoC,SAAU,SAACC,GAAUpC,EAAaoC,EAAMC,OAAOH,UAIhDvB,EAAc,mBAAGiB,UAAU,qBAAqBU,MAAM,WAAWC,QAASxB,IACnE,mBAAGa,UAAU,sBAAsBU,MAAM,cAAcC,QAASxB,OAK1E,qBAAKa,UAAU,YAAf,SAEEnB,EAAMO,KAAI,SAACC,GACN,OACM,sBAAKW,UAAU,WAAf,UACR,6BAAKX,EAAIE,OACT,sBAAKS,UAAU,WAAf,UACC,mBAAGA,UAAU,sBAAsBU,MAAM,YAAYC,QAAS,kBAjD/D,SAACrB,GAEf,IAAIsB,EAAY/B,EAAMgC,MAAK,SAACxB,GAC3B,OAAOA,EAAIC,KAAOA,KAGnBd,QAAQC,IAAImC,GACZ5B,GAAgB,GAChBZ,EAAawC,EAAYrB,MACzBL,EAAcI,GAwCmEwB,CAASzB,EAAIC,OAC5E,mBAAGU,UAAU,2BAA2BU,MAAM,cAAcC,QAAS,kBA7DvE,SAACrB,GACb,IAAMyB,EAAYlC,EAAMmC,QAAO,SAAC3B,GAC1B,OAAOA,EAAIC,KAAOA,KAExBR,EAASiC,GAyD8EE,CAAW5B,EAAIC,YAJrDD,EAAIC,SAahD,qBAAKU,UAAU,YAAf,SACE,wBACEA,UAAU,eACV,oBAAkB,aAClBW,QAnEE,WACf7B,EAAS,KA+DE,SAKE,2DCtHAoC,MANf,WACE,OACI,cAAC,EAAD,KCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9788da49.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/todo.975e4dd4.svg\";","import React,{useState,useEffect} from 'react';\nimport img from '../Images/todo.svg';\nimport './Style.css';\n\nconst Todo = () => {\n\n\t//To get data from local storage\n\n\tconst getLocalItems=()=>{\n\t\tlet list=localStorage.getItem('listData');\n\t\tconsole.log(list);\n\n\t\tif(list){\n\t\t\treturn JSON.parse(localStorage.getItem('listData'));\n\t\t}else{\n\t\t\treturn [];\n\t\t}\n\n\t}\n\n\tconst [inputData, setInputData] = useState();\n\tconst [Items, setItems] = useState(getLocalItems());\n\tconst [toggleSubmit, setToggleSubmit] = useState(true);\n\tconst [isEditItem, setIsEditItem] = useState(null);\n\n\tconst addItem=()=>{\n\t\tif(!inputData){\n         alert(\"input Some Data\");\n\t\t} else if (inputData && !toggleSubmit) {\n\t      setItems(\n\t        Items.map((val) => {\n\t          if (val.id === isEditItem) {\n\t            return { ...val, name: inputData };\n\t          }\n\t          return val;\n\t        })\n\t      );\n\n\t      setInputData(\"\");\n\t      setIsEditItem(null);\n\t      setToggleSubmit(true);\n        }else{\n\t\t\tconst allInputData = {\n\t\t        id: new Date().getTime().toString(),\n\t\t        name: inputData,\n\t\t      };\n\t        setItems([...Items,allInputData]);\n\t        setInputData(\"\");\n        }\n\t}\n\n\tconst deleteItem=(id)=>{\n      const updatedItem=Items.filter((val)=>{\n            return val.id !== id;\n      });\n      setItems(updatedItem);\n\t}\n\n\tconst removeAll=()=>{\n\t\tsetItems([]);\n\t}\n\n\tconst editItem=(id)=>{\n\n\t\tlet newEditItem=Items.find((val)=>{\n\t\t\treturn val.id === id;\n\t\t});\n\n\t\tconsole.log(newEditItem);\n\t\tsetToggleSubmit(false);\n\t\tsetInputData(newEditItem.name);\n\t\tsetIsEditItem(id);\n\n\t}\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem('listData',JSON.stringify(Items))\n\t\t\n\t}, [Items]);\n\n\n\treturn (\n\t\t<>\n\t\t<div className=\"main-div\">\n\t        <div className=\"child-div\">\n\t          <figure>\n\t            <img src={img} alt=\"todologo\" />\n\t            <figcaption>Add Your List Here üñê</figcaption>\n\t          </figure>\n\t          <div className=\"addItems\">\n\t            <input\n\t              type=\"text\"\n\t              placeholder=\"‚úç Add Item\"\n\t              value={inputData}\n\t              onChange={(event)=>{ setInputData(event.target.value);}}   \n\t            /> \n\n\t            {\n\t            \ttoggleSubmit? <i className=\"fa fa-plus add-btn\" title=\"Add Item\" onClick={addItem}></i> : \n\t            \t       <i className=\"far fa-edit add-btn\" title=\"Update Item\" onClick={addItem}></i>\n\t            }\n    \n\t          </div>\n\t          {/* show our items  */}\n\t          <div className=\"showItems\">\n\t           {\n\t           \tItems.map((val)=>{\n                  return(\n                       \t<div className=\"eachItem\" key={val.id}>\n\t\t\t\t           \t<h3>{val.name}</h3>\n\t\t\t\t           \t<div className=\"todo-btn\">\n\t\t\t\t           \t\t<i className=\"far fa-edit add-btn\" title=\"Edit Item\" onClick={()=>editItem(val.id)}></i> \t\n\t\t\t\t           \t    <i className=\"far fa-trash-alt add-btn\" title=\"Delete Item\" onClick={()=>deleteItem(val.id)}></i>\n\t\t\t\t           \t</div>  \t               \t\n\t\t\t           </div>\n                  \t)\n\t           \t})\n\t           }  \n\t          </div>\n\n\t          {/* remove all button  */}\n\t          <div className=\"showItems\">\n\t            <button\n\t              className=\"btn effect04\"\n\t              data-sm-link-text=\"Remove All\"\n\t              onClick={removeAll}\n\t              >\n\t              <span> CHECK LIST</span>\n\t            </button>\n\t          </div>\n\t        </div>\n\t    </div>\n\t\t</>\n\t)\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from './Component/Todo/TodoList';\n\nfunction App() {\n  return (\n      <Todo />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}